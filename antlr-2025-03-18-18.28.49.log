2025-03-18 18:28:49:139 grammar LogManager.java:25 before: (COMBINED_GRAMMAR BigC (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT declaration))) EOF))) (RULE declaration (BLOCK (ALT constDeclaration) (ALT type Identifier declarationRemainder))) (RULE type (BLOCK (ALT 'int') (ALT 'float') (ALT 'bool') (ALT 'char') (ALT 'void'))) (RULE constDeclaration (BLOCK (ALT 'const' type Identifier '=' expression ';'))) (RULE declarationRemainder (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' block) (ALT Identifier (? (BLOCK (ALT variableInitializer))) ';'))) (RULE variableInitializer (BLOCK (ALT '=' expression ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT type Identifier))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT blockItem))) '}'))) (RULE blockItem (BLOCK (ALT declaration) (ALT statement))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT elseBlock)))))) (RULE elseBlock (BLOCK (ALT 'else' elseBlockRemainder))) (RULE elseBlockRemainder (BLOCK (ALT block) (ALT ifStatement))) (RULE nonIfStatement (BLOCK (ALT expression ';') (ALT whileStatement) (ALT returnStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' expression ';'))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT '=' assignmentExpression)))))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT '||' logicalAndExpression)))))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT '&&' equalityExpression)))))) (RULE equalityExpression (BLOCK (ALT comparisonExpression (* (BLOCK (ALT equalityOperator comparisonExpression)))))) (RULE equalityOperator (BLOCK (ALT '==') (ALT '!='))) (RULE comparisonExpression (BLOCK (ALT additionExpression (* (BLOCK (ALT comparisonOperator additionExpression)))))) (RULE comparisonOperator (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<='))) (RULE additionExpression (BLOCK (ALT multiplicationExpression (* (BLOCK (ALT addSubtractOperator multiplicationExpression)))))) (RULE addSubtractOperator (BLOCK (ALT '+') (ALT '-'))) (RULE multiplicationExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multDivModOperator unaryExpression)))))) (RULE multDivModOperator (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT '++') (ALT '--'))) (RULE postfixExpression (BLOCK (ALT primaryExpression (* (BLOCK (ALT arrayAccess) (ALT functionCallArgs) (ALT increaseDecrease)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCallArgs (BLOCK (ALT '(' argList ')'))) (RULE increaseDecrease (BLOCK (ALT '++') (ALT '--'))) (RULE argList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT IntegerConstant) (ALT FloatingConstant) (ALT BooleanConstant) (ALT CharConstant))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CharConstant (BLOCK (ALT '\'' (~ (SET [\r\n])) '\''))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE DOCSTRING (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2025-03-18 18:28:49:157 grammar LogManager.java:25 after: (COMBINED_GRAMMAR BigC (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT declaration))) EOF))) (RULE declaration (BLOCK (ALT constDeclaration) (ALT type Identifier declarationRemainder))) (RULE type (BLOCK (ALT (SET 'int' 'float' 'bool' 'char' 'void')))) (RULE constDeclaration (BLOCK (ALT 'const' type Identifier '=' expression ';'))) (RULE declarationRemainder (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' block) (ALT Identifier (? (BLOCK (ALT variableInitializer))) ';'))) (RULE variableInitializer (BLOCK (ALT '=' expression ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT type Identifier))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT blockItem))) '}'))) (RULE blockItem (BLOCK (ALT declaration) (ALT statement))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT elseBlock)))))) (RULE elseBlock (BLOCK (ALT 'else' elseBlockRemainder))) (RULE elseBlockRemainder (BLOCK (ALT block) (ALT ifStatement))) (RULE nonIfStatement (BLOCK (ALT expression ';') (ALT whileStatement) (ALT returnStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' expression ';'))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT '=' assignmentExpression)))))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT '||' logicalAndExpression)))))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT '&&' equalityExpression)))))) (RULE equalityExpression (BLOCK (ALT comparisonExpression (* (BLOCK (ALT equalityOperator comparisonExpression)))))) (RULE equalityOperator (BLOCK (ALT (SET '==' '!=')))) (RULE comparisonExpression (BLOCK (ALT additionExpression (* (BLOCK (ALT comparisonOperator additionExpression)))))) (RULE comparisonOperator (BLOCK (ALT (SET '>' '<' '>=' '<=')))) (RULE additionExpression (BLOCK (ALT multiplicationExpression (* (BLOCK (ALT addSubtractOperator multiplicationExpression)))))) (RULE addSubtractOperator (BLOCK (ALT (SET '+' '-')))) (RULE multiplicationExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multDivModOperator unaryExpression)))))) (RULE multDivModOperator (BLOCK (ALT (SET '*' '/' '%')))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT (SET '++' '--')))) (RULE postfixExpression (BLOCK (ALT primaryExpression (* (BLOCK (ALT arrayAccess) (ALT functionCallArgs) (ALT increaseDecrease)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCallArgs (BLOCK (ALT '(' argList ')'))) (RULE increaseDecrease (BLOCK (ALT (SET '++' '--')))) (RULE argList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT (SET IntegerConstant FloatingConstant BooleanConstant CharConstant)))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CharConstant (BLOCK (ALT '\'' (~ (SET [\r\n])) '\''))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE DOCSTRING (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2025-03-18 18:28:49:179 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR BigC (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT declaration))) EOF))) (RULE declaration (BLOCK (ALT constDeclaration) (ALT type Identifier declarationRemainder))) (RULE type (BLOCK (ALT (SET 'int' 'float' 'bool' 'char' 'void')))) (RULE constDeclaration (BLOCK (ALT 'const' type Identifier '=' expression ';'))) (RULE declarationRemainder (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' block) (ALT Identifier (? (BLOCK (ALT variableInitializer))) ';'))) (RULE variableInitializer (BLOCK (ALT '=' expression ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT type Identifier))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT blockItem))) '}'))) (RULE blockItem (BLOCK (ALT declaration) (ALT statement))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT elseBlock)))))) (RULE elseBlock (BLOCK (ALT 'else' elseBlockRemainder))) (RULE elseBlockRemainder (BLOCK (ALT block) (ALT ifStatement))) (RULE nonIfStatement (BLOCK (ALT expression ';') (ALT whileStatement) (ALT returnStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' expression ';'))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT '=' assignmentExpression)))))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT '||' logicalAndExpression)))))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT '&&' equalityExpression)))))) (RULE equalityExpression (BLOCK (ALT comparisonExpression (* (BLOCK (ALT equalityOperator comparisonExpression)))))) (RULE equalityOperator (BLOCK (ALT (SET '==' '!=')))) (RULE comparisonExpression (BLOCK (ALT additionExpression (* (BLOCK (ALT comparisonOperator additionExpression)))))) (RULE comparisonOperator (BLOCK (ALT (SET '>' '<' '>=' '<=')))) (RULE additionExpression (BLOCK (ALT multiplicationExpression (* (BLOCK (ALT addSubtractOperator multiplicationExpression)))))) (RULE addSubtractOperator (BLOCK (ALT (SET '+' '-')))) (RULE multiplicationExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multDivModOperator unaryExpression)))))) (RULE multDivModOperator (BLOCK (ALT (SET '*' '/' '%')))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT (SET '++' '--')))) (RULE postfixExpression (BLOCK (ALT primaryExpression (* (BLOCK (ALT arrayAccess) (ALT functionCallArgs) (ALT increaseDecrease)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCallArgs (BLOCK (ALT '(' argList ')'))) (RULE increaseDecrease (BLOCK (ALT (SET '++' '--')))) (RULE argList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT (SET IntegerConstant FloatingConstant BooleanConstant CharConstant))))))
2025-03-18 18:28:49:179 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR BigCLexer (RULES (RULE T__0 (BLOCK (ALT 'int'))) (RULE T__1 (BLOCK (ALT 'float'))) (RULE T__2 (BLOCK (ALT 'bool'))) (RULE T__3 (BLOCK (ALT 'char'))) (RULE T__4 (BLOCK (ALT 'void'))) (RULE T__5 (BLOCK (ALT 'const'))) (RULE T__6 (BLOCK (ALT '='))) (RULE T__7 (BLOCK (ALT ';'))) (RULE T__8 (BLOCK (ALT '('))) (RULE T__9 (BLOCK (ALT ')'))) (RULE T__10 (BLOCK (ALT ','))) (RULE T__11 (BLOCK (ALT '{'))) (RULE T__12 (BLOCK (ALT '}'))) (RULE T__13 (BLOCK (ALT 'if'))) (RULE T__14 (BLOCK (ALT 'else'))) (RULE T__15 (BLOCK (ALT 'while'))) (RULE T__16 (BLOCK (ALT 'return'))) (RULE T__17 (BLOCK (ALT '||'))) (RULE T__18 (BLOCK (ALT '&&'))) (RULE T__19 (BLOCK (ALT '=='))) (RULE T__20 (BLOCK (ALT '!='))) (RULE T__21 (BLOCK (ALT '>'))) (RULE T__22 (BLOCK (ALT '<'))) (RULE T__23 (BLOCK (ALT '>='))) (RULE T__24 (BLOCK (ALT '<='))) (RULE T__25 (BLOCK (ALT '+'))) (RULE T__26 (BLOCK (ALT '-'))) (RULE T__27 (BLOCK (ALT '*'))) (RULE T__28 (BLOCK (ALT '/'))) (RULE T__29 (BLOCK (ALT '%'))) (RULE T__30 (BLOCK (ALT '++'))) (RULE T__31 (BLOCK (ALT '--'))) (RULE T__32 (BLOCK (ALT '['))) (RULE T__33 (BLOCK (ALT ']'))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9])))))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE CharConstant (BLOCK (ALT '\'' (~ (SET [\r\n])) '\''))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE DOCSTRING (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2025-03-18 18:28:49:479 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, T__31=32, T__32=33, T__33=34, Identifier=35, IntegerConstant=36, FloatingConstant=37, CharConstant=38, BooleanConstant=39, WS=40, COMMENT=41, DOCSTRING=42}
2025-03-18 18:28:49:479 semantics LogManager.java:25 strings={'int'=1, 'float'=2, 'bool'=3, 'char'=4, 'void'=5, 'const'=6, '='=7, ';'=8, '('=9, ')'=10, ','=11, '{'=12, '}'=13, 'if'=14, 'else'=15, 'while'=16, 'return'=17, '||'=18, '&&'=19, '=='=20, '!='=21, '>'=22, '<'=23, '>='=24, '<='=25, '+'=26, '-'=27, '*'=28, '/'=29, '%'=30, '++'=31, '--'=32, '['=33, ']'=34}
2025-03-18 18:28:49:529 LL1 LogManager.java:25 
DECISION 0 in rule program
2025-03-18 18:28:49:529 LL1 LogManager.java:25 look=[{1..6}, <EOF>]
2025-03-18 18:28:49:529 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:529 LL1 LogManager.java:25 
DECISION 1 in rule declaration
2025-03-18 18:28:49:529 LL1 LogManager.java:25 look=[6, {1..5}]
2025-03-18 18:28:49:529 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:529 LL1 LogManager.java:25 
DECISION 2 in rule declarationRemainder
2025-03-18 18:28:49:529 LL1 LogManager.java:25 look=[{1..5}, 10]
2025-03-18 18:28:49:529 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:529 LL1 LogManager.java:25 
DECISION 3 in rule declarationRemainder
2025-03-18 18:28:49:529 LL1 LogManager.java:25 look=[7, 8]
2025-03-18 18:28:49:529 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:529 LL1 LogManager.java:25 
DECISION 4 in rule declarationRemainder
2025-03-18 18:28:49:529 LL1 LogManager.java:25 look=[9, 35]
2025-03-18 18:28:49:529 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:529 LL1 LogManager.java:25 
DECISION 5 in rule parameterList
2025-03-18 18:28:49:530 LL1 LogManager.java:25 look=[11, 10]
2025-03-18 18:28:49:530 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:530 LL1 LogManager.java:25 
DECISION 6 in rule block
2025-03-18 18:28:49:530 LL1 LogManager.java:25 look=[{1..6, 9, 14, 16..17, 31..32, 35..39}, 13]
2025-03-18 18:28:49:530 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:530 LL1 LogManager.java:25 
DECISION 7 in rule blockItem
2025-03-18 18:28:49:530 LL1 LogManager.java:25 look=[{1..6}, {9, 14, 16..17, 31..32, 35..39}]
2025-03-18 18:28:49:530 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:530 LL1 LogManager.java:25 
DECISION 8 in rule statement
2025-03-18 18:28:49:530 LL1 LogManager.java:25 look=[14, {9, 16..17, 31..32, 35..39}]
2025-03-18 18:28:49:530 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:530 LL1 LogManager.java:25 
DECISION 9 in rule ifStatement
2025-03-18 18:28:49:530 LL1 LogManager.java:25 look=[15, {1..6, 9, 13..14, 16..17, 31..32, 35..39}]
2025-03-18 18:28:49:530 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:530 LL1 LogManager.java:25 
DECISION 10 in rule elseBlockRemainder
2025-03-18 18:28:49:531 LL1 LogManager.java:25 look=[12, 14]
2025-03-18 18:28:49:531 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:531 LL1 LogManager.java:25 
DECISION 11 in rule nonIfStatement
2025-03-18 18:28:49:531 LL1 LogManager.java:25 look=[{9, 31..32, 35..39}, 16, 17]
2025-03-18 18:28:49:531 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:531 LL1 LogManager.java:25 
DECISION 12 in rule assignmentExpression
2025-03-18 18:28:49:531 LL1 LogManager.java:25 look=[7, {8, 10..11, 34}]
2025-03-18 18:28:49:531 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:531 LL1 LogManager.java:25 
DECISION 13 in rule logicalOrExpression
2025-03-18 18:28:49:531 LL1 LogManager.java:25 look=[18, {7..8, 10..11, 34}]
2025-03-18 18:28:49:531 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:531 LL1 LogManager.java:25 
DECISION 14 in rule logicalAndExpression
2025-03-18 18:28:49:531 LL1 LogManager.java:25 look=[19, {7..8, 10..11, 18, 34}]
2025-03-18 18:28:49:531 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:531 LL1 LogManager.java:25 
DECISION 15 in rule equalityExpression
2025-03-18 18:28:49:531 LL1 LogManager.java:25 look=[{20..21}, {7..8, 10..11, 18..19, 34}]
2025-03-18 18:28:49:531 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:531 LL1 LogManager.java:25 
DECISION 16 in rule comparisonExpression
2025-03-18 18:28:49:531 LL1 LogManager.java:25 look=[{22..25}, {7..8, 10..11, 18..21, 34}]
2025-03-18 18:28:49:531 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:531 LL1 LogManager.java:25 
DECISION 17 in rule additionExpression
2025-03-18 18:28:49:532 LL1 LogManager.java:25 look=[{26..27}, {7..8, 10..11, 18..25, 34}]
2025-03-18 18:28:49:532 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:532 LL1 LogManager.java:25 
DECISION 18 in rule multiplicationExpression
2025-03-18 18:28:49:532 LL1 LogManager.java:25 look=[{28..30}, {7..8, 10..11, 18..27, 34}]
2025-03-18 18:28:49:532 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:532 LL1 LogManager.java:25 
DECISION 19 in rule unaryExpression
2025-03-18 18:28:49:532 LL1 LogManager.java:25 look=[{9, 35..39}, {31..32}]
2025-03-18 18:28:49:532 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:532 LL1 LogManager.java:25 
DECISION 20 in rule postfixExpression
2025-03-18 18:28:49:532 LL1 LogManager.java:25 look=[33, 9, {31..32}]
2025-03-18 18:28:49:532 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:532 LL1 LogManager.java:25 
DECISION 21 in rule postfixExpression
2025-03-18 18:28:49:532 LL1 LogManager.java:25 look=[{9, 31..33}, {7..8, 10..11, 18..30, 34}]
2025-03-18 18:28:49:533 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:533 LL1 LogManager.java:25 
DECISION 22 in rule argList
2025-03-18 18:28:49:533 LL1 LogManager.java:25 look=[11, 10]
2025-03-18 18:28:49:533 LL1 LogManager.java:25 LL(1)? true
2025-03-18 18:28:49:533 LL1 LogManager.java:25 
DECISION 23 in rule primaryExpression
2025-03-18 18:28:49:533 LL1 LogManager.java:25 look=[35, {36..39}, 9]
2025-03-18 18:28:49:533 LL1 LogManager.java:25 LL(1)? true
