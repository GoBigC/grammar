2025-03-26 06:55:53:978 grammar LogManager.java:25 load ConstantDefinition from BigC.g4
2025-03-26 06:55:53:979 grammar LogManager.java:25 load Terminals from /home/lanphgphm/Projects/BigCLang/grammar/ConstantDefinition.g4
2025-03-26 06:55:53:982 grammar LogManager.java:25 load PrimitiveTypes from /home/lanphgphm/Projects/BigCLang/grammar/ConstantDefinition.g4
2025-03-26 06:55:53:982 grammar LogManager.java:25 load VariableAssignment from /home/lanphgphm/Projects/BigCLang/grammar/ConstantDefinition.g4
2025-03-26 06:55:53:983 grammar LogManager.java:25 load FunctionCallExpression from /home/lanphgphm/Projects/BigCLang/grammar/VariableAssignment.g4
2025-03-26 06:55:53:985 grammar LogManager.java:25 load LogicalExpression from /home/lanphgphm/Projects/BigCLang/grammar/FunctionCallExpression.g4
2025-03-26 06:55:53:986 grammar LogManager.java:25 load ArithmeticExpression from /home/lanphgphm/Projects/BigCLang/grammar/LogicalExpression.g4
2025-03-26 06:55:53:987 grammar LogManager.java:25 load IfStatement from BigC.g4
2025-03-26 06:55:53:988 grammar LogManager.java:25 load FunctionDefinition from /home/lanphgphm/Projects/BigCLang/grammar/IfStatement.g4
2025-03-26 06:55:53:989 grammar LogManager.java:25 load WhileLoop from BigC.g4
2025-03-26 06:55:53:990 grammar LogManager.java:25 before: (COMBINED_GRAMMAR BigC (import ConstantDefinition VariableAssignment IfStatement WhileLoop Terminals PrimitiveTypes FunctionDefinition ArithmeticExpression FunctionCallExpression LogicalExpression) (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT declaration))) EOF)))))
2025-03-26 06:55:53:992 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:992 grammar LogManager.java:25 imported rule: (RULE constDeclaration (BLOCK (ALT 'const' type Identifier '=' expression ';')))
2025-03-26 06:55:53:992 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:992 grammar LogManager.java:25 imported rule: (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_]))))))
2025-03-26 06:55:53:992 grammar LogManager.java:25 imported rule: (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))))))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9]))))))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE CharConstant (BLOCK (ALT '\'' . '\'')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip)))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE MULTILINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE type (BLOCK (ALT 'int') (ALT 'float') (ALT 'bool') (ALT 'char') (ALT 'void')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE expression (BLOCK (ALT assignmentExpression)))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT assignmentRest))))))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE assignmentRest (BLOCK (ALT '=' assignmentExpression)))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE variableInitializer (BLOCK (ALT '=' expression ';')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE postfixExpression (BLOCK (ALT primaryExpression (? (BLOCK (ALT arrayAccess) (ALT functionCallArgs) (ALT increaseDecrease))))))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE arrayAccess (BLOCK (ALT '[' expression ']')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE functionCallArgs (BLOCK (ALT '(' (? (BLOCK (ALT argList))) ')')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE increaseDecrease (BLOCK (ALT '++') (ALT '--')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE argList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression))))))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')')))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE constant (BLOCK (ALT IntegerConstant) (ALT FloatingConstant) (ALT BooleanConstant) (ALT CharConstant)))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT logicalOrRest))))))
2025-03-26 06:55:53:993 grammar LogManager.java:25 imported rule: (RULE logicalOrRest (BLOCK (ALT '||' logicalAndExpression)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT logicalAndRest))))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE logicalAndRest (BLOCK (ALT '&&' equalityExpression)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE equalityExpression (BLOCK (ALT comparisonExpression (* (BLOCK (ALT equalityRest))))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE equalityRest (BLOCK (ALT equalityOperator comparisonExpression)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE equalityOperator (BLOCK (ALT '==') (ALT '!=')))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE comparisonExpression (BLOCK (ALT additionExpression (* (BLOCK (ALT comparisonRest))))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE comparisonRest (BLOCK (ALT comparisonOperator additionExpression)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE comparisonOperator (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<=')))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE additionExpression (BLOCK (ALT multiplicationExpression (* (BLOCK (ALT additionExpressionRest))))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE additionExpressionRest (BLOCK (ALT addSubtractOperator multiplicationExpression)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE addSubtractOperator (BLOCK (ALT '+') (ALT '-')))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE multiplicationExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multiplicationExpressionRest))))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE multiplicationExpressionRest (BLOCK (ALT multDivModOperator unaryExpression)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE multDivModOperator (BLOCK (ALT '*') (ALT '/') (ALT '%')))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE unaryOperator (BLOCK (ALT '++') (ALT '--')))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT elseClause))))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE elseClause (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT ifStatement)))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE declaration (BLOCK (ALT type Identifier declarationRemainder)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE declarationRemainder (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' block) (ALT Identifier (? (BLOCK (ALT variableInitializer))) ';')))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter))))))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE parameter (BLOCK (ALT type Identifier)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT blockItem))) '}')))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE blockItem (BLOCK (ALT declaration) (ALT statement)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported actions: []
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE nonIfStatement (BLOCK (ALT expression ';') (ALT whileStatement) (ALT returnStatement)))
2025-03-26 06:55:53:994 grammar LogManager.java:25 imported rule: (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' block)))
2025-03-26 06:55:53:995 grammar LogManager.java:25 imported rule: (RULE returnStatement (BLOCK (ALT 'return' expression ';')))
2025-03-26 06:55:53:995 grammar LogManager.java:25 Grammar: (COMBINED_GRAMMAR BigC (import ConstantDefinition VariableAssignment IfStatement WhileLoop Terminals PrimitiveTypes FunctionDefinition ArithmeticExpression FunctionCallExpression LogicalExpression) (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT declaration))) EOF))) (RULE constDeclaration (BLOCK (ALT 'const' type Identifier '=' expression ';'))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE CharConstant (BLOCK (ALT '\'' . '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE MULTILINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE type (BLOCK (ALT 'int') (ALT 'float') (ALT 'bool') (ALT 'char') (ALT 'void'))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT assignmentRest)))))) (RULE assignmentRest (BLOCK (ALT '=' assignmentExpression))) (RULE variableInitializer (BLOCK (ALT '=' expression ';'))) (RULE postfixExpression (BLOCK (ALT primaryExpression (? (BLOCK (ALT arrayAccess) (ALT functionCallArgs) (ALT increaseDecrease)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCallArgs (BLOCK (ALT '(' (? (BLOCK (ALT argList))) ')'))) (RULE increaseDecrease (BLOCK (ALT '++') (ALT '--'))) (RULE argList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT IntegerConstant) (ALT FloatingConstant) (ALT BooleanConstant) (ALT CharConstant))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT logicalOrRest)))))) (RULE logicalOrRest (BLOCK (ALT '||' logicalAndExpression))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT logicalAndRest)))))) (RULE logicalAndRest (BLOCK (ALT '&&' equalityExpression))) (RULE equalityExpression (BLOCK (ALT comparisonExpression (* (BLOCK (ALT equalityRest)))))) (RULE equalityRest (BLOCK (ALT equalityOperator comparisonExpression))) (RULE equalityOperator (BLOCK (ALT '==') (ALT '!='))) (RULE comparisonExpression (BLOCK (ALT additionExpression (* (BLOCK (ALT comparisonRest)))))) (RULE comparisonRest (BLOCK (ALT comparisonOperator additionExpression))) (RULE comparisonOperator (BLOCK (ALT '>') (ALT '<') (ALT '>=') (ALT '<='))) (RULE additionExpression (BLOCK (ALT multiplicationExpression (* (BLOCK (ALT additionExpressionRest)))))) (RULE additionExpressionRest (BLOCK (ALT addSubtractOperator multiplicationExpression))) (RULE addSubtractOperator (BLOCK (ALT '+') (ALT '-'))) (RULE multiplicationExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multiplicationExpressionRest)))))) (RULE multiplicationExpressionRest (BLOCK (ALT multDivModOperator unaryExpression))) (RULE multDivModOperator (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT '++') (ALT '--'))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT elseClause)))))) (RULE elseClause (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT ifStatement))))) (RULE declaration (BLOCK (ALT type Identifier declarationRemainder))) (RULE declarationRemainder (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' block) (ALT Identifier (? (BLOCK (ALT variableInitializer))) ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT type Identifier))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT blockItem))) '}'))) (RULE blockItem (BLOCK (ALT declaration) (ALT statement))) (RULE nonIfStatement (BLOCK (ALT expression ';') (ALT whileStatement) (ALT returnStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' expression ';')))))
2025-03-26 06:55:54:014 grammar LogManager.java:25 after: (COMBINED_GRAMMAR BigC (import ConstantDefinition VariableAssignment IfStatement WhileLoop Terminals PrimitiveTypes FunctionDefinition ArithmeticExpression FunctionCallExpression LogicalExpression) (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT declaration))) EOF))) (RULE constDeclaration (BLOCK (ALT 'const' type Identifier '=' expression ';'))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE CharConstant (BLOCK (ALT '\'' . '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE MULTILINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE type (BLOCK (ALT (SET 'int' 'float' 'bool' 'char' 'void')))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT assignmentRest)))))) (RULE assignmentRest (BLOCK (ALT '=' assignmentExpression))) (RULE variableInitializer (BLOCK (ALT '=' expression ';'))) (RULE postfixExpression (BLOCK (ALT primaryExpression (? (BLOCK (ALT arrayAccess) (ALT functionCallArgs) (ALT increaseDecrease)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCallArgs (BLOCK (ALT '(' (? (BLOCK (ALT argList))) ')'))) (RULE increaseDecrease (BLOCK (ALT (SET '++' '--')))) (RULE argList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT (SET IntegerConstant FloatingConstant BooleanConstant CharConstant)))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT logicalOrRest)))))) (RULE logicalOrRest (BLOCK (ALT '||' logicalAndExpression))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT logicalAndRest)))))) (RULE logicalAndRest (BLOCK (ALT '&&' equalityExpression))) (RULE equalityExpression (BLOCK (ALT comparisonExpression (* (BLOCK (ALT equalityRest)))))) (RULE equalityRest (BLOCK (ALT equalityOperator comparisonExpression))) (RULE equalityOperator (BLOCK (ALT (SET '==' '!=')))) (RULE comparisonExpression (BLOCK (ALT additionExpression (* (BLOCK (ALT comparisonRest)))))) (RULE comparisonRest (BLOCK (ALT comparisonOperator additionExpression))) (RULE comparisonOperator (BLOCK (ALT (SET '>' '<' '>=' '<=')))) (RULE additionExpression (BLOCK (ALT multiplicationExpression (* (BLOCK (ALT additionExpressionRest)))))) (RULE additionExpressionRest (BLOCK (ALT addSubtractOperator multiplicationExpression))) (RULE addSubtractOperator (BLOCK (ALT (SET '+' '-')))) (RULE multiplicationExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multiplicationExpressionRest)))))) (RULE multiplicationExpressionRest (BLOCK (ALT multDivModOperator unaryExpression))) (RULE multDivModOperator (BLOCK (ALT (SET '*' '/' '%')))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT (SET '++' '--')))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT elseClause)))))) (RULE elseClause (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT ifStatement))))) (RULE declaration (BLOCK (ALT type Identifier declarationRemainder))) (RULE declarationRemainder (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' block) (ALT Identifier (? (BLOCK (ALT variableInitializer))) ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT type Identifier))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT blockItem))) '}'))) (RULE blockItem (BLOCK (ALT declaration) (ALT statement))) (RULE nonIfStatement (BLOCK (ALT expression ';') (ALT whileStatement) (ALT returnStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' expression ';')))))
2025-03-26 06:55:54:034 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR BigC (import ConstantDefinition VariableAssignment IfStatement WhileLoop Terminals PrimitiveTypes FunctionDefinition ArithmeticExpression FunctionCallExpression LogicalExpression) (RULES (RULE program (BLOCK (ALT (* (BLOCK (ALT declaration))) EOF))) (RULE constDeclaration (BLOCK (ALT 'const' type Identifier '=' expression ';'))) (RULE type (BLOCK (ALT (SET 'int' 'float' 'bool' 'char' 'void')))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT assignmentRest)))))) (RULE assignmentRest (BLOCK (ALT '=' assignmentExpression))) (RULE variableInitializer (BLOCK (ALT '=' expression ';'))) (RULE postfixExpression (BLOCK (ALT primaryExpression (? (BLOCK (ALT arrayAccess) (ALT functionCallArgs) (ALT increaseDecrease)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCallArgs (BLOCK (ALT '(' (? (BLOCK (ALT argList))) ')'))) (RULE increaseDecrease (BLOCK (ALT (SET '++' '--')))) (RULE argList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT (SET IntegerConstant FloatingConstant BooleanConstant CharConstant)))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT logicalOrRest)))))) (RULE logicalOrRest (BLOCK (ALT '||' logicalAndExpression))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT logicalAndRest)))))) (RULE logicalAndRest (BLOCK (ALT '&&' equalityExpression))) (RULE equalityExpression (BLOCK (ALT comparisonExpression (* (BLOCK (ALT equalityRest)))))) (RULE equalityRest (BLOCK (ALT equalityOperator comparisonExpression))) (RULE equalityOperator (BLOCK (ALT (SET '==' '!=')))) (RULE comparisonExpression (BLOCK (ALT additionExpression (* (BLOCK (ALT comparisonRest)))))) (RULE comparisonRest (BLOCK (ALT comparisonOperator additionExpression))) (RULE comparisonOperator (BLOCK (ALT (SET '>' '<' '>=' '<=')))) (RULE additionExpression (BLOCK (ALT multiplicationExpression (* (BLOCK (ALT additionExpressionRest)))))) (RULE additionExpressionRest (BLOCK (ALT addSubtractOperator multiplicationExpression))) (RULE addSubtractOperator (BLOCK (ALT (SET '+' '-')))) (RULE multiplicationExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multiplicationExpressionRest)))))) (RULE multiplicationExpressionRest (BLOCK (ALT multDivModOperator unaryExpression))) (RULE multDivModOperator (BLOCK (ALT (SET '*' '/' '%')))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT (SET '++' '--')))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT elseClause)))))) (RULE elseClause (BLOCK (ALT 'else' (BLOCK (ALT block) (ALT ifStatement))))) (RULE declaration (BLOCK (ALT type Identifier declarationRemainder))) (RULE declarationRemainder (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' block) (ALT Identifier (? (BLOCK (ALT variableInitializer))) ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT type Identifier))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT blockItem))) '}'))) (RULE blockItem (BLOCK (ALT declaration) (ALT statement))) (RULE nonIfStatement (BLOCK (ALT expression ';') (ALT whileStatement) (ALT returnStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' block))) (RULE returnStatement (BLOCK (ALT 'return' expression ';')))))
2025-03-26 06:55:54:034 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR BigCLexer (RULES (RULE T__0 (BLOCK (ALT 'const'))) (RULE T__1 (BLOCK (ALT '='))) (RULE T__2 (BLOCK (ALT ';'))) (RULE T__3 (BLOCK (ALT 'int'))) (RULE T__4 (BLOCK (ALT 'float'))) (RULE T__5 (BLOCK (ALT 'bool'))) (RULE T__6 (BLOCK (ALT 'char'))) (RULE T__7 (BLOCK (ALT 'void'))) (RULE T__8 (BLOCK (ALT '['))) (RULE T__9 (BLOCK (ALT ']'))) (RULE T__10 (BLOCK (ALT '('))) (RULE T__11 (BLOCK (ALT ')'))) (RULE T__12 (BLOCK (ALT '++'))) (RULE T__13 (BLOCK (ALT '--'))) (RULE T__14 (BLOCK (ALT ','))) (RULE T__15 (BLOCK (ALT '||'))) (RULE T__16 (BLOCK (ALT '&&'))) (RULE T__17 (BLOCK (ALT '=='))) (RULE T__18 (BLOCK (ALT '!='))) (RULE T__19 (BLOCK (ALT '>'))) (RULE T__20 (BLOCK (ALT '<'))) (RULE T__21 (BLOCK (ALT '>='))) (RULE T__22 (BLOCK (ALT '<='))) (RULE T__23 (BLOCK (ALT '+'))) (RULE T__24 (BLOCK (ALT '-'))) (RULE T__25 (BLOCK (ALT '*'))) (RULE T__26 (BLOCK (ALT '/'))) (RULE T__27 (BLOCK (ALT '%'))) (RULE T__28 (BLOCK (ALT 'if'))) (RULE T__29 (BLOCK (ALT 'else'))) (RULE T__30 (BLOCK (ALT '{'))) (RULE T__31 (BLOCK (ALT '}'))) (RULE T__32 (BLOCK (ALT 'while'))) (RULE T__33 (BLOCK (ALT 'return'))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (+ (BLOCK (ALT [0-9])))))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE CharConstant (BLOCK (ALT '\'' . '\''))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE MULTILINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip)))))
2025-03-26 06:55:54:358 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, T__31=32, T__32=33, T__33=34, Identifier=35, IntegerConstant=36, FloatingConstant=37, BooleanConstant=38, CharConstant=39, WS=40, COMMENT=41, MULTILINE_COMMENT=42}
2025-03-26 06:55:54:358 semantics LogManager.java:25 strings={'const'=1, '='=2, ';'=3, 'int'=4, 'float'=5, 'bool'=6, 'char'=7, 'void'=8, '['=9, ']'=10, '('=11, ')'=12, '++'=13, '--'=14, ','=15, '||'=16, '&&'=17, '=='=18, '!='=19, '>'=20, '<'=21, '>='=22, '<='=23, '+'=24, '-'=25, '*'=26, '/'=27, '%'=28, 'if'=29, 'else'=30, '{'=31, '}'=32, 'while'=33, 'return'=34}
2025-03-26 06:55:54:419 LL1 LogManager.java:25 
DECISION 0 in rule program
2025-03-26 06:55:54:419 LL1 LogManager.java:25 look=[{4..8}, <EOF>]
2025-03-26 06:55:54:419 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:419 LL1 LogManager.java:25 
DECISION 1 in rule assignmentExpression
2025-03-26 06:55:54:419 LL1 LogManager.java:25 look=[2, {3, 10, 12, 15}]
2025-03-26 06:55:54:419 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:419 LL1 LogManager.java:25 
DECISION 2 in rule postfixExpression
2025-03-26 06:55:54:419 LL1 LogManager.java:25 look=[9, 11, {13..14}, {2..3, 10, 12, 15..28}]
2025-03-26 06:55:54:419 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 3 in rule functionCallArgs
2025-03-26 06:55:54:420 LL1 LogManager.java:25 look=[{11, 13..14, 35..39}, 12]
2025-03-26 06:55:54:420 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 4 in rule argList
2025-03-26 06:55:54:420 LL1 LogManager.java:25 look=[15, 12]
2025-03-26 06:55:54:420 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 5 in rule primaryExpression
2025-03-26 06:55:54:420 LL1 LogManager.java:25 look=[35, {36..39}, 11]
2025-03-26 06:55:54:420 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 6 in rule logicalOrExpression
2025-03-26 06:55:54:420 LL1 LogManager.java:25 look=[16, {2..3, 10, 12, 15}]
2025-03-26 06:55:54:420 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 7 in rule logicalAndExpression
2025-03-26 06:55:54:420 LL1 LogManager.java:25 look=[17, {2..3, 10, 12, 15..16}]
2025-03-26 06:55:54:420 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 8 in rule equalityExpression
2025-03-26 06:55:54:420 LL1 LogManager.java:25 look=[{18..19}, {2..3, 10, 12, 15..17}]
2025-03-26 06:55:54:420 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 9 in rule comparisonExpression
2025-03-26 06:55:54:420 LL1 LogManager.java:25 look=[{20..23}, {2..3, 10, 12, 15..19}]
2025-03-26 06:55:54:420 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:420 LL1 LogManager.java:25 
DECISION 10 in rule additionExpression
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[{24..25}, {2..3, 10, 12, 15..23}]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 11 in rule multiplicationExpression
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[{26..28}, {2..3, 10, 12, 15..25}]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 12 in rule unaryExpression
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[{11, 35..39}, {13..14}]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 13 in rule statement
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[29, {11, 13..14, 33..39}]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 14 in rule ifStatement
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[30, {4..8, 11, 13..14, 29, 32..39}]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 15 in rule elseClause
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[31, 29]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 16 in rule declarationRemainder
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[{4..8}, 12]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 17 in rule declarationRemainder
2025-03-26 06:55:54:421 LL1 LogManager.java:25 look=[2, 3]
2025-03-26 06:55:54:421 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:421 LL1 LogManager.java:25 
DECISION 18 in rule declarationRemainder
2025-03-26 06:55:54:422 LL1 LogManager.java:25 look=[11, 35]
2025-03-26 06:55:54:422 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:422 LL1 LogManager.java:25 
DECISION 19 in rule parameterList
2025-03-26 06:55:54:422 LL1 LogManager.java:25 look=[15, 12]
2025-03-26 06:55:54:422 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:422 LL1 LogManager.java:25 
DECISION 20 in rule block
2025-03-26 06:55:54:422 LL1 LogManager.java:25 look=[{4..8, 11, 13..14, 29, 33..39}, 32]
2025-03-26 06:55:54:422 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:422 LL1 LogManager.java:25 
DECISION 21 in rule blockItem
2025-03-26 06:55:54:422 LL1 LogManager.java:25 look=[{4..8}, {11, 13..14, 29, 33..39}]
2025-03-26 06:55:54:422 LL1 LogManager.java:25 LL(1)? true
2025-03-26 06:55:54:422 LL1 LogManager.java:25 
DECISION 22 in rule nonIfStatement
2025-03-26 06:55:54:422 LL1 LogManager.java:25 look=[{11, 13..14, 35..39}, 33, 34]
2025-03-26 06:55:54:422 LL1 LogManager.java:25 LL(1)? true
