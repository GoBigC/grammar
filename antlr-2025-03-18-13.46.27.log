2025-03-18 13:46:27:221 grammar LogManager.java:25 before: (COMBINED_GRAMMAR attempt4 (RULES (RULE program (BLOCK (ALT declarationList EOF))) (RULE declarationList (BLOCK (ALT (* (BLOCK (ALT declaration)))))) (RULE declaration (BLOCK (ALT constDeclaration) (ALT typeSpecifier Identifier declarationRest))) (RULE declarationRest (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' compoundStatement) (ALT declaratorList ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT typeSpecifier Identifier))) (RULE constDeclaration (BLOCK (ALT 'const' typeSpecifier constDeclaratorList ';'))) (RULE declaratorList (BLOCK (ALT variableDeclarator (* (BLOCK (ALT ',' variableDeclarator)))))) (RULE constDeclaratorList (BLOCK (ALT constDeclarator (* (BLOCK (ALT ',' constDeclarator)))))) (RULE variableDeclarator (BLOCK (ALT Identifier (? (BLOCK (ALT initializer)))))) (RULE initializer (BLOCK (ALT '=' expression))) (RULE constDeclarator (BLOCK (ALT Identifier '=' expression))) (RULE typeSpecifier (BLOCK (ALT 'int') (ALT 'float') (ALT 'char') (ALT 'bool') (ALT 'void'))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE compoundStatement (BLOCK (ALT '{' blockItemList '}'))) (RULE blockItemList (BLOCK (ALT (* (BLOCK (ALT blockItem)))))) (RULE blockItem (BLOCK (ALT statement) (ALT variableDecl))) (RULE variableDecl (BLOCK (ALT typeSpecifier declaratorList ';') (ALT constDeclaration))) (RULE expressionStatement (BLOCK (ALT expressionOpt ';'))) (RULE expressionOpt (BLOCK (ALT (? (BLOCK (ALT expression)))))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' nonIfStatement) (ALT 'if' '(' expression ')' nonIfStatement 'else' statement) (ALT 'if' '(' expression ')' ifStatement 'else' statement))) (RULE nonIfStatement (BLOCK (ALT expressionStatement) (ALT compoundStatement) (ALT whileStatement) (ALT jumpStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' statement))) (RULE jumpStatement (BLOCK (ALT 'return' expressionOpt ';'))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT assignmentOperator assignmentExpression)))))) (RULE assignmentOperator (BLOCK (ALT '=') (ALT '+=') (ALT '-=') (ALT '*=') (ALT '/=') (ALT '%='))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT '||' logicalAndExpression)))))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT '&&' equalityExpression)))))) (RULE equalityExpression (BLOCK (ALT relationalExpression (* (BLOCK (ALT equalityOperator relationalExpression)))))) (RULE equalityOperator (BLOCK (ALT '==') (ALT '!='))) (RULE relationalExpression (BLOCK (ALT additiveExpression (* (BLOCK (ALT relationalOperator additiveExpression)))))) (RULE relationalOperator (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) (RULE additiveExpression (BLOCK (ALT multiplicativeExpression (* (BLOCK (ALT additiveOperator multiplicativeExpression)))))) (RULE additiveOperator (BLOCK (ALT '+') (ALT '-'))) (RULE multiplicativeExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multiplicativeOperator unaryExpression)))))) (RULE multiplicativeOperator (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT '+') (ALT '-') (ALT '!') (ALT '++') (ALT '--'))) (RULE postfixExpression (BLOCK (ALT primaryExpression (* (BLOCK (ALT arrayAccess) (ALT functionCall) (ALT incDec)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCall (BLOCK (ALT '(' (? (BLOCK (ALT argumentList))) ')'))) (RULE incDec (BLOCK (ALT '++') (ALT '--'))) (RULE argumentList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT IntegerConstant) (ALT FloatingConstant) (ALT CharacterConstant) (ALT BooleanConstant))) (RULE CONST (BLOCK (ALT 'const'))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LBRACKET (BLOCK (ALT '['))) (RULE RBRACKET (BLOCK (ALT ']'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COMMA (BLOCK (ALT ','))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MOD (BLOCK (ALT '%'))) (RULE INC (BLOCK (ALT '++'))) (RULE DEC (BLOCK (ALT '--'))) (RULE EQ (BLOCK (ALT '=='))) (RULE NE (BLOCK (ALT '!='))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE ADD_ASSIGN (BLOCK (ALT '+='))) (RULE SUB_ASSIGN (BLOCK (ALT '-='))) (RULE MUL_ASSIGN (BLOCK (ALT '*='))) (RULE DIV_ASSIGN (BLOCK (ALT '/='))) (RULE MOD_ASSIGN (BLOCK (ALT '%='))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '0x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (* (BLOCK (ALT [0-9]))) (? (BLOCK (ALT ExponentPart)))) (ALT '.' (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT ExponentPart)))) (ALT (+ (BLOCK (ALT [0-9]))) ExponentPart))) (RULE ExponentPart (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9])))))) (RULE CharacterConstant (BLOCK (ALT '\'' SingleCharacter '\'') (ALT '\'' EscapeSequence '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\r\n]))))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE EscapeSequence (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"?abfnrtv\\]) (ALT '\\' [0-7] (? (BLOCK (ALT [0-7]))) (? (BLOCK (ALT [0-7])))) (ALT '\\x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2025-03-18 13:46:27:244 grammar LogManager.java:25 after: (COMBINED_GRAMMAR attempt4 (RULES (RULE program (BLOCK (ALT declarationList EOF))) (RULE declarationList (BLOCK (ALT (* (BLOCK (ALT declaration)))))) (RULE declaration (BLOCK (ALT constDeclaration) (ALT typeSpecifier Identifier declarationRest))) (RULE declarationRest (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' compoundStatement) (ALT declaratorList ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT typeSpecifier Identifier))) (RULE constDeclaration (BLOCK (ALT 'const' typeSpecifier constDeclaratorList ';'))) (RULE declaratorList (BLOCK (ALT variableDeclarator (* (BLOCK (ALT ',' variableDeclarator)))))) (RULE constDeclaratorList (BLOCK (ALT constDeclarator (* (BLOCK (ALT ',' constDeclarator)))))) (RULE variableDeclarator (BLOCK (ALT Identifier (? (BLOCK (ALT initializer)))))) (RULE initializer (BLOCK (ALT '=' expression))) (RULE constDeclarator (BLOCK (ALT Identifier '=' expression))) (RULE typeSpecifier (BLOCK (ALT (SET 'int' 'float' 'char' 'bool' 'void')))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE compoundStatement (BLOCK (ALT '{' blockItemList '}'))) (RULE blockItemList (BLOCK (ALT (* (BLOCK (ALT blockItem)))))) (RULE blockItem (BLOCK (ALT statement) (ALT variableDecl))) (RULE variableDecl (BLOCK (ALT typeSpecifier declaratorList ';') (ALT constDeclaration))) (RULE expressionStatement (BLOCK (ALT expressionOpt ';'))) (RULE expressionOpt (BLOCK (ALT (? (BLOCK (ALT expression)))))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' nonIfStatement) (ALT 'if' '(' expression ')' nonIfStatement 'else' statement) (ALT 'if' '(' expression ')' ifStatement 'else' statement))) (RULE nonIfStatement (BLOCK (ALT expressionStatement) (ALT compoundStatement) (ALT whileStatement) (ALT jumpStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' statement))) (RULE jumpStatement (BLOCK (ALT 'return' expressionOpt ';'))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT assignmentOperator assignmentExpression)))))) (RULE assignmentOperator (BLOCK (ALT (SET '=' '+=' '-=' '*=' '/=' '%=')))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT '||' logicalAndExpression)))))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT '&&' equalityExpression)))))) (RULE equalityExpression (BLOCK (ALT relationalExpression (* (BLOCK (ALT equalityOperator relationalExpression)))))) (RULE equalityOperator (BLOCK (ALT (SET '==' '!=')))) (RULE relationalExpression (BLOCK (ALT additiveExpression (* (BLOCK (ALT relationalOperator additiveExpression)))))) (RULE relationalOperator (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE additiveExpression (BLOCK (ALT multiplicativeExpression (* (BLOCK (ALT additiveOperator multiplicativeExpression)))))) (RULE additiveOperator (BLOCK (ALT (SET '+' '-')))) (RULE multiplicativeExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multiplicativeOperator unaryExpression)))))) (RULE multiplicativeOperator (BLOCK (ALT (SET '*' '/' '%')))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT (SET '+' '-' '!' '++' '--')))) (RULE postfixExpression (BLOCK (ALT primaryExpression (* (BLOCK (ALT arrayAccess) (ALT functionCall) (ALT incDec)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCall (BLOCK (ALT '(' (? (BLOCK (ALT argumentList))) ')'))) (RULE incDec (BLOCK (ALT (SET '++' '--')))) (RULE argumentList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT (SET IntegerConstant FloatingConstant CharacterConstant BooleanConstant)))) (RULE CONST (BLOCK (ALT 'const'))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LBRACKET (BLOCK (ALT '['))) (RULE RBRACKET (BLOCK (ALT ']'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COMMA (BLOCK (ALT ','))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MOD (BLOCK (ALT '%'))) (RULE INC (BLOCK (ALT '++'))) (RULE DEC (BLOCK (ALT '--'))) (RULE EQ (BLOCK (ALT '=='))) (RULE NE (BLOCK (ALT '!='))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE ADD_ASSIGN (BLOCK (ALT '+='))) (RULE SUB_ASSIGN (BLOCK (ALT '-='))) (RULE MUL_ASSIGN (BLOCK (ALT '*='))) (RULE DIV_ASSIGN (BLOCK (ALT '/='))) (RULE MOD_ASSIGN (BLOCK (ALT '%='))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '0x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (* (BLOCK (ALT [0-9]))) (? (BLOCK (ALT ExponentPart)))) (ALT '.' (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT ExponentPart)))) (ALT (+ (BLOCK (ALT [0-9]))) ExponentPart))) (RULE ExponentPart (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9])))))) (RULE CharacterConstant (BLOCK (ALT '\'' SingleCharacter '\'') (ALT '\'' EscapeSequence '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\r\n]))))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE EscapeSequence (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"?abfnrtv\\]) (ALT '\\' [0-7] (? (BLOCK (ALT [0-7]))) (? (BLOCK (ALT [0-7])))) (ALT '\\x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2025-03-18 13:46:27:285 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR attempt4 (RULES (RULE program (BLOCK (ALT declarationList EOF))) (RULE declarationList (BLOCK (ALT (* (BLOCK (ALT declaration)))))) (RULE declaration (BLOCK (ALT constDeclaration) (ALT typeSpecifier Identifier declarationRest))) (RULE declarationRest (BLOCK (ALT '(' (? (BLOCK (ALT parameterList))) ')' compoundStatement) (ALT declaratorList ';'))) (RULE parameterList (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) (RULE parameter (BLOCK (ALT typeSpecifier Identifier))) (RULE constDeclaration (BLOCK (ALT 'const' typeSpecifier constDeclaratorList ';'))) (RULE declaratorList (BLOCK (ALT variableDeclarator (* (BLOCK (ALT ',' variableDeclarator)))))) (RULE constDeclaratorList (BLOCK (ALT constDeclarator (* (BLOCK (ALT ',' constDeclarator)))))) (RULE variableDeclarator (BLOCK (ALT Identifier (? (BLOCK (ALT initializer)))))) (RULE initializer (BLOCK (ALT '=' expression))) (RULE constDeclarator (BLOCK (ALT Identifier '=' expression))) (RULE typeSpecifier (BLOCK (ALT (SET 'int' 'float' 'char' 'bool' 'void')))) (RULE statement (BLOCK (ALT ifStatement) (ALT nonIfStatement))) (RULE compoundStatement (BLOCK (ALT '{' blockItemList '}'))) (RULE blockItemList (BLOCK (ALT (* (BLOCK (ALT blockItem)))))) (RULE blockItem (BLOCK (ALT statement) (ALT variableDecl))) (RULE variableDecl (BLOCK (ALT typeSpecifier declaratorList ';') (ALT constDeclaration))) (RULE expressionStatement (BLOCK (ALT expressionOpt ';'))) (RULE expressionOpt (BLOCK (ALT (? (BLOCK (ALT expression)))))) (RULE ifStatement (BLOCK (ALT 'if' '(' expression ')' nonIfStatement) (ALT 'if' '(' expression ')' nonIfStatement 'else' statement) (ALT 'if' '(' expression ')' ifStatement 'else' statement))) (RULE nonIfStatement (BLOCK (ALT expressionStatement) (ALT compoundStatement) (ALT whileStatement) (ALT jumpStatement))) (RULE whileStatement (BLOCK (ALT 'while' '(' expression ')' statement))) (RULE jumpStatement (BLOCK (ALT 'return' expressionOpt ';'))) (RULE expression (BLOCK (ALT assignmentExpression))) (RULE assignmentExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT assignmentOperator assignmentExpression)))))) (RULE assignmentOperator (BLOCK (ALT (SET '=' '+=' '-=' '*=' '/=' '%=')))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression (* (BLOCK (ALT '||' logicalAndExpression)))))) (RULE logicalAndExpression (BLOCK (ALT equalityExpression (* (BLOCK (ALT '&&' equalityExpression)))))) (RULE equalityExpression (BLOCK (ALT relationalExpression (* (BLOCK (ALT equalityOperator relationalExpression)))))) (RULE equalityOperator (BLOCK (ALT (SET '==' '!=')))) (RULE relationalExpression (BLOCK (ALT additiveExpression (* (BLOCK (ALT relationalOperator additiveExpression)))))) (RULE relationalOperator (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE additiveExpression (BLOCK (ALT multiplicativeExpression (* (BLOCK (ALT additiveOperator multiplicativeExpression)))))) (RULE additiveOperator (BLOCK (ALT (SET '+' '-')))) (RULE multiplicativeExpression (BLOCK (ALT unaryExpression (* (BLOCK (ALT multiplicativeOperator unaryExpression)))))) (RULE multiplicativeOperator (BLOCK (ALT (SET '*' '/' '%')))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT unaryOperator unaryExpression))) (RULE unaryOperator (BLOCK (ALT (SET '+' '-' '!' '++' '--')))) (RULE postfixExpression (BLOCK (ALT primaryExpression (* (BLOCK (ALT arrayAccess) (ALT functionCall) (ALT incDec)))))) (RULE arrayAccess (BLOCK (ALT '[' expression ']'))) (RULE functionCall (BLOCK (ALT '(' (? (BLOCK (ALT argumentList))) ')'))) (RULE incDec (BLOCK (ALT (SET '++' '--')))) (RULE argumentList (BLOCK (ALT assignmentExpression (* (BLOCK (ALT ',' assignmentExpression)))))) (RULE primaryExpression (BLOCK (ALT Identifier) (ALT constant) (ALT '(' expression ')'))) (RULE constant (BLOCK (ALT (SET IntegerConstant FloatingConstant CharacterConstant BooleanConstant))))))
2025-03-18 13:46:27:286 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR attempt4Lexer (RULES (RULE CONST (BLOCK (ALT 'const'))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE CHAR (BLOCK (ALT 'char'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE VOID (BLOCK (ALT 'void'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE LPAREN (BLOCK (ALT '('))) (RULE RPAREN (BLOCK (ALT ')'))) (RULE LBRACE (BLOCK (ALT '{'))) (RULE RBRACE (BLOCK (ALT '}'))) (RULE LBRACKET (BLOCK (ALT '['))) (RULE RBRACKET (BLOCK (ALT ']'))) (RULE SEMI (BLOCK (ALT ';'))) (RULE COMMA (BLOCK (ALT ','))) (RULE ASSIGN (BLOCK (ALT '='))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE MOD (BLOCK (ALT '%'))) (RULE INC (BLOCK (ALT '++'))) (RULE DEC (BLOCK (ALT '--'))) (RULE EQ (BLOCK (ALT '=='))) (RULE NE (BLOCK (ALT '!='))) (RULE LT (BLOCK (ALT '<'))) (RULE GT (BLOCK (ALT '>'))) (RULE LE (BLOCK (ALT '<='))) (RULE GE (BLOCK (ALT '>='))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE ADD_ASSIGN (BLOCK (ALT '+='))) (RULE SUB_ASSIGN (BLOCK (ALT '-='))) (RULE MUL_ASSIGN (BLOCK (ALT '*='))) (RULE DIV_ASSIGN (BLOCK (ALT '/='))) (RULE MOD_ASSIGN (BLOCK (ALT '%='))) (RULE IntegerConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9])))) (ALT '0x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE FloatingConstant (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) '.' (* (BLOCK (ALT [0-9]))) (? (BLOCK (ALT ExponentPart)))) (ALT '.' (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT ExponentPart)))) (ALT (+ (BLOCK (ALT [0-9]))) ExponentPart))) (RULE ExponentPart (RULEMODIFIERS fragment) (BLOCK (ALT [eE] (? (BLOCK (ALT [+-]))) (+ (BLOCK (ALT [0-9])))))) (RULE CharacterConstant (BLOCK (ALT '\'' SingleCharacter '\'') (ALT '\'' EscapeSequence '\''))) (RULE SingleCharacter (RULEMODIFIERS fragment) (BLOCK (ALT (~ (SET ['\\\r\n]))))) (RULE BooleanConstant (BLOCK (ALT 'true') (ALT 'false'))) (RULE EscapeSequence (RULEMODIFIERS fragment) (BLOCK (ALT '\\' ['"?abfnrtv\\]) (ALT '\\' [0-7] (? (BLOCK (ALT [0-7]))) (? (BLOCK (ALT [0-7])))) (ALT '\\x' (+ (BLOCK (ALT [0-9a-fA-F])))))) (RULE Identifier (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE BLOCK_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip)))))
2025-03-18 13:46:27:752 semantics LogManager.java:25 tokens={EOF=-1, CONST=1, INT=2, FLOAT=3, CHAR=4, BOOL=5, VOID=6, IF=7, ELSE=8, WHILE=9, RETURN=10, LPAREN=11, RPAREN=12, LBRACE=13, RBRACE=14, LBRACKET=15, RBRACKET=16, SEMI=17, COMMA=18, ASSIGN=19, ADD=20, SUB=21, MUL=22, DIV=23, MOD=24, INC=25, DEC=26, EQ=27, NE=28, LT=29, GT=30, LE=31, GE=32, AND=33, OR=34, NOT=35, ADD_ASSIGN=36, SUB_ASSIGN=37, MUL_ASSIGN=38, DIV_ASSIGN=39, MOD_ASSIGN=40, IntegerConstant=41, FloatingConstant=42, CharacterConstant=43, BooleanConstant=44, Identifier=45, WS=46, BLOCK_COMMENT=47, LINE_COMMENT=48}
2025-03-18 13:46:27:753 semantics LogManager.java:25 strings={'const'=1, 'int'=2, 'float'=3, 'char'=4, 'bool'=5, 'void'=6, 'if'=7, 'else'=8, 'while'=9, 'return'=10, '('=11, ')'=12, '{'=13, '}'=14, '['=15, ']'=16, ';'=17, ','=18, '='=19, '+'=20, '-'=21, '*'=22, '/'=23, '%'=24, '++'=25, '--'=26, '=='=27, '!='=28, '<'=29, '>'=30, '<='=31, '>='=32, '&&'=33, '||'=34, '!'=35, '+='=36, '-='=37, '*='=38, '/='=39, '%='=40}
2025-03-18 13:46:27:790 LL1 LogManager.java:25 
DECISION 0 in rule declarationList
2025-03-18 13:46:27:790 LL1 LogManager.java:25 look=[{1..6}, <EOF>]
2025-03-18 13:46:27:791 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:791 LL1 LogManager.java:25 
DECISION 1 in rule declaration
2025-03-18 13:46:27:791 LL1 LogManager.java:25 look=[1, {2..6}]
2025-03-18 13:46:27:791 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:791 LL1 LogManager.java:25 
DECISION 2 in rule declarationRest
2025-03-18 13:46:27:791 LL1 LogManager.java:25 look=[{2..6}, 12]
2025-03-18 13:46:27:791 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:791 LL1 LogManager.java:25 
DECISION 3 in rule declarationRest
2025-03-18 13:46:27:791 LL1 LogManager.java:25 look=[11, 45]
2025-03-18 13:46:27:791 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:791 LL1 LogManager.java:25 
DECISION 4 in rule parameterList
2025-03-18 13:46:27:791 LL1 LogManager.java:25 look=[18, 12]
2025-03-18 13:46:27:791 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:791 LL1 LogManager.java:25 
DECISION 5 in rule declaratorList
2025-03-18 13:46:27:791 LL1 LogManager.java:25 look=[18, 17]
2025-03-18 13:46:27:791 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:791 LL1 LogManager.java:25 
DECISION 6 in rule constDeclaratorList
2025-03-18 13:46:27:791 LL1 LogManager.java:25 look=[18, 17]
2025-03-18 13:46:27:791 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:791 LL1 LogManager.java:25 
DECISION 7 in rule variableDeclarator
2025-03-18 13:46:27:792 LL1 LogManager.java:25 look=[19, {17..18}]
2025-03-18 13:46:27:792 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:792 LL1 LogManager.java:25 
DECISION 8 in rule statement
2025-03-18 13:46:27:792 LL1 LogManager.java:25 look=[7, {9..11, 13, 17, 20..21, 25..26, 35, 41..45}]
2025-03-18 13:46:27:792 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:792 LL1 LogManager.java:25 
DECISION 9 in rule blockItemList
2025-03-18 13:46:27:792 LL1 LogManager.java:25 look=[{1..7, 9..11, 13, 17, 20..21, 25..26, 35, 41..45}, 14]
2025-03-18 13:46:27:792 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:792 LL1 LogManager.java:25 
DECISION 10 in rule blockItem
2025-03-18 13:46:27:793 LL1 LogManager.java:25 look=[{7, 9..11, 13, 17, 20..21, 25..26, 35, 41..45}, {1..6}]
2025-03-18 13:46:27:793 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:793 LL1 LogManager.java:25 
DECISION 11 in rule variableDecl
2025-03-18 13:46:27:793 LL1 LogManager.java:25 look=[{2..6}, 1]
2025-03-18 13:46:27:793 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:793 LL1 LogManager.java:25 
DECISION 12 in rule expressionOpt
2025-03-18 13:46:27:793 LL1 LogManager.java:25 look=[{11, 20..21, 25..26, 35, 41..45}, 17]
2025-03-18 13:46:27:793 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:793 LL1 LogManager.java:25 
DECISION 13 in rule ifStatement
2025-03-18 13:46:27:793 LL1 LogManager.java:25 look=[7, 7, 7]
2025-03-18 13:46:27:793 LL1 LogManager.java:25 LL(1)? false
2025-03-18 13:46:27:793 LL1 LogManager.java:25 
DECISION 14 in rule nonIfStatement
2025-03-18 13:46:27:793 LL1 LogManager.java:25 look=[{11, 17, 20..21, 25..26, 35, 41..45}, 13, 9, 10]
2025-03-18 13:46:27:794 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:794 LL1 LogManager.java:25 
DECISION 15 in rule assignmentExpression
2025-03-18 13:46:27:794 LL1 LogManager.java:25 look=[{19, 36..40}, {12, 16..18}]
2025-03-18 13:46:27:794 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:794 LL1 LogManager.java:25 
DECISION 16 in rule logicalOrExpression
2025-03-18 13:46:27:794 LL1 LogManager.java:25 look=[34, {12, 16..19, 36..40}]
2025-03-18 13:46:27:794 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:794 LL1 LogManager.java:25 
DECISION 17 in rule logicalAndExpression
2025-03-18 13:46:27:794 LL1 LogManager.java:25 look=[33, {12, 16..19, 34, 36..40}]
2025-03-18 13:46:27:794 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:794 LL1 LogManager.java:25 
DECISION 18 in rule equalityExpression
2025-03-18 13:46:27:795 LL1 LogManager.java:25 look=[{27..28}, {12, 16..19, 33..34, 36..40}]
2025-03-18 13:46:27:795 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:795 LL1 LogManager.java:25 
DECISION 19 in rule relationalExpression
2025-03-18 13:46:27:795 LL1 LogManager.java:25 look=[{29..32}, {12, 16..19, 27..28, 33..34, 36..40}]
2025-03-18 13:46:27:795 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:795 LL1 LogManager.java:25 
DECISION 20 in rule additiveExpression
2025-03-18 13:46:27:795 LL1 LogManager.java:25 look=[{20..21}, {12, 16..19, 27..34, 36..40}]
2025-03-18 13:46:27:795 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:795 LL1 LogManager.java:25 
DECISION 21 in rule multiplicativeExpression
2025-03-18 13:46:27:796 LL1 LogManager.java:25 look=[{22..24}, {12, 16..21, 27..34, 36..40}]
2025-03-18 13:46:27:796 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:796 LL1 LogManager.java:25 
DECISION 22 in rule unaryExpression
2025-03-18 13:46:27:796 LL1 LogManager.java:25 look=[{11, 41..45}, {20..21, 25..26, 35}]
2025-03-18 13:46:27:796 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:796 LL1 LogManager.java:25 
DECISION 23 in rule postfixExpression
2025-03-18 13:46:27:796 LL1 LogManager.java:25 look=[15, 11, {25..26}]
2025-03-18 13:46:27:796 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:796 LL1 LogManager.java:25 
DECISION 24 in rule postfixExpression
2025-03-18 13:46:27:796 LL1 LogManager.java:25 look=[{11, 15, 25..26}, {12, 16..24, 27..34, 36..40}]
2025-03-18 13:46:27:796 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:796 LL1 LogManager.java:25 
DECISION 25 in rule functionCall
2025-03-18 13:46:27:797 LL1 LogManager.java:25 look=[{11, 20..21, 25..26, 35, 41..45}, 12]
2025-03-18 13:46:27:797 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:797 LL1 LogManager.java:25 
DECISION 26 in rule argumentList
2025-03-18 13:46:27:797 LL1 LogManager.java:25 look=[18, 12]
2025-03-18 13:46:27:797 LL1 LogManager.java:25 LL(1)? true
2025-03-18 13:46:27:797 LL1 LogManager.java:25 
DECISION 27 in rule primaryExpression
2025-03-18 13:46:27:797 LL1 LogManager.java:25 look=[45, {41..44}, 11]
2025-03-18 13:46:27:797 LL1 LogManager.java:25 LL(1)? true
